import heapq

class Graph:
    def _init_(self):
        self.nodes = set()
        self.edges = {}

    def add_node(self, value):
        self.nodes.add(value)
        self.edges[value] = []

    def add_edge(self, from_node, to_node, weight):
        self.edges[from_node].append((to_node, weight))

def a_star(graph, start, end):
    open_set = []
    heapq.heappush(open_set, (0, start))  # Priority queue with (f-score, node) pairs
    came_from = {}
    g_score = {node: float('inf') for node in graph.nodes}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph.nodes}
    f_score[start] = heuristic(start, end)

    while open_set:
        current_f, current_node = heapq.heappop(open_set)

        if current_node == end:
            path = reconstruct_path(came_from, current_node)
            return path

        for neighbor, weight in graph.edges[current_node]:
            tentative_g_score = g_score[current_node] + weight
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, end)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return None  # No path found

def heuristic(node, goal):
    # Manhanttan distance heuristic
    x1, y1 = node
    x2, y2 = goal
    return abs(x1 - x2) + abs(y1 - y2)

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

# Creating a graph
g = Graph()
g.add_node((0, 0))
g.add_node((1, 0))
g.add_node((2, 0))
g.add_node((0, 1))
g.add_node((1, 1))
g.add_node((2, 1))
g.add_edge((0, 0), (1, 0), 1)
g.add_edge((1, 0), (2, 0), 1)
g.add_edge((0, 0), (0, 1), 1)
g.add_edge((1, 0), (1, 1), 1)
g.add_edge((2, 0), (2, 1), 1)
g.add_edge((0, 1), (1, 1), 1)
g.add_edge((1, 1), (2, 1), 1)

start = (0, 0)
end = (2, 1)
path = a_star(g, start, end)

if path:
    print("Shortest Path:", path)
else:
    print("No path found.")
